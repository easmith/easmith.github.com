<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crypto on easmith - заметки</title>
    <link>http://localhost:1313/tags/crypto/</link>
    <description>Recent content in Crypto on easmith - заметки</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 25 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/crypto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Как я искал биткойны в картинах</title>
      <link>http://localhost:1313/post/how-late-art/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/how-late-art/</guid>
      <description>Совсем недавно наткнулся в одном из телеграмм каналов на новость, о том, что один художник по имени Andy Bauch спрятал в своих картинах ключ к биткойнам.
Меня привлекают переплетения искусства и технологии, поэтому я заинтересовался и решил попробовать свои силы.
Произведения Энди представляют собой рисунки созданные из разноцветных частичек конструктора лего.
Вот одна из работ, в которой спрятаны $20 по курсу на апрель 2016 года:
A post shared by Andy Bauch (@andybauch) on Jul 5, 2016 at 8:36am PDT</description>
    </item>
    
    <item>
      <title>PoW &#43; Random Access Memory</title>
      <link>http://localhost:1313/post/pow-and-ram/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/pow-and-ram/</guid>
      <description>Как усложнить процесс майнинга на специальных устройствах - использовать PoW + Random Access Memory. Другими словами, в алгоритм хэширования включить еще и доказательство случайного чтения из памяти. Сейчас в Ethereum использует для этого отдельный DAG файл.
Моя же идея заключается в вычислении хэша следующим образом:
Берем заголовок (header), и случайное число (nonce) Вычисляем цепочку хэшей:
header + (nonce + 0) header + (nonce + 1) header + (nonce + 2) .</description>
    </item>
    
  </channel>
</rss>