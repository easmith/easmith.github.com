<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>easmith - заметки</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on easmith - заметки</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Oct 2017 15:30:00 +0300</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Обо мне</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 01 Oct 2017 15:30:00 +0300</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>Здравствуй, друг!
Меня зовут Евгений. Когда-то давно я пас коров и косил сено. А еще танцевал брейк и выпаивал из старых телеков радиодетали для своих поделок.
Однажды, у меня появился компьютер. Pentium II с 32-мя мегабайтами оперативной памяти! На этом компе я умудрялся пользоваться фотошопом, монтировать видосики, играть и программировать. На нем же я читал Энциклопедию по безопасности, которая открыла для меня новое понимание реальности. Реальности, которую не хотелось принимать. Это породило веру в то, что можно изменить мир :))</description>
    </item>
    
    <item>
      <title>Изучая Go: пишем p2p мессенджер со сквозным шифрованием</title>
      <link>http://localhost:1313/post/golang-p2p-messenger/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/golang-p2p-messenger/</guid>
      <description>Yet another P2P Messenger Читать отзывы и документацию о языке не достаточно, чтобы научиться на нем писать более менее полезные приложения.
Обязательно для закрепления нужно создать что-то интересное, чтобы наработки можно было бы использовать в других своих задачах.
Статья ориентирована на новичков интересующихся языком go и пиринговыми сетями. И для профессионалов, умеющих предлагать разумные идеи или конструктивно критиковать.
Программирую достаточно давно с разной степенью погруженности на java, php, js, python.</description>
    </item>
    
    <item>
      <title>Как работает этот сайт</title>
      <link>http://localhost:1313/post/how-site-works/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/how-site-works/</guid>
      <description>Однажды, решив вести свои замети в сети, я определялся с выбором инструмента для генерации HTML из Markdown файлов. Собственно, выбор сузился до двух из них: Jekyll и Hugo. Jekyll популярнее и в гитхабе для него есть даже функционал по выбору шаблонов. Однако, мне не хотелось поднимать окружение Ruby. Hugo проще и для его работы не нужно ничего лишнего, поэтому и выбор пал на него.
 Итак, для начала создаем репозиторий со своим логином: easmith.</description>
    </item>
    
    <item>
      <title>Как я искал биткойны в картинах</title>
      <link>http://localhost:1313/post/how-late-art/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/how-late-art/</guid>
      <description>Совсем недавно наткнулся в одном из телеграмм каналов на новость, о том, что один художник по имени Andy Bauch спрятал в своих картинах ключ к биткойнам.
Меня привлекают переплетения искусства и технологии, поэтому я заинтересовался и решил попробовать свои силы.
Произведения Энди представляют собой рисунки созданные из разноцветных частичек конструктора лего.
Вот одна из работ, в которой спрятаны $20 по курсу на апрель 2016 года:
  View this post on Instagram         A post shared by Andy Bauch (@andybauch) on Jul 5, 2016 at 8:36am PDT</description>
    </item>
    
    <item>
      <title>PoW &#43; Random Access Memory</title>
      <link>http://localhost:1313/post/pow-and-ram/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/pow-and-ram/</guid>
      <description>Как усложнить процесс майнинга на специальных устройствах - использовать PoW + Random Access Memory. Другими словами, в алгоритм хэширования включить еще и доказательство случайного чтения из памяти. Сейчас в Ethereum использует для этого отдельный DAG файл.
Моя же идея заключается в вычислении хэша следующим образом:
Берем заголовок (header), и случайное число (nonce) Вычисляем цепочку хэшей:
header + (nonce + 0) header + (nonce + 1) header + (nonce + 2) .</description>
    </item>
    
  </channel>
</rss>